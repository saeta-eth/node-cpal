name: Build and Publish

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 0.1.0)'
        required: true
        default: ''

jobs:
  build:
    name: Build on ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: darwin
            arch: x64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: darwin
            arch: arm64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: win32
            arch: x64

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev pkg-config

      - name: Temporarily modify package.json for build
        run: |
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            delete pkg.os;
            delete pkg.cpu;
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Prepare package
        run: |
          mkdir -p dist/${{ matrix.platform }}-${{ matrix.arch }}
          cp index.node dist/${{ matrix.platform }}-${{ matrix.arch }}/
          cp index.d.ts dist/
          cp package.json dist/
          cp README.md dist/
          cp -r examples dist/

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.platform }}-${{ matrix.arch }}
          path: dist

  publish:
    name: Publish to npm
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          registry-url: 'https://registry.npmjs.org'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare package
        run: |
          mkdir -p dist
          cp index.js dist/
          cp index.d.ts dist/
          cp package.json dist/
          cp README.md dist/
          cp -r examples dist/
          mkdir -p dist/bin

          # Copy platform-specific binaries to the bin directory
          mkdir -p dist/bin/darwin-x64
          mkdir -p dist/bin/darwin-arm64
          mkdir -p dist/bin/linux-x64
          mkdir -p dist/bin/win32-x64

          # Copy the binaries from artifacts
          cp artifacts/binaries-darwin-x64/darwin-x64/index.node dist/bin/darwin-x64/ || echo "No macOS x64 binary found"
          cp artifacts/binaries-darwin-arm64/darwin-arm64/index.node dist/bin/darwin-arm64/ || echo "No macOS ARM64 binary found"
          cp artifacts/binaries-linux-x64/linux-x64/index.node dist/bin/linux-x64/ || echo "No Linux binary found"
          cp artifacts/binaries-win32-x64/win32-x64/index.node dist/bin/win32-x64/ || echo "No Windows binary found"

      - name: Modify package.json for platform-specific binaries
        run: |
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('dist/package.json', 'utf8'));
            pkg.main = 'index.js';
            delete pkg.gypfile;
            pkg.os = ['darwin', 'linux', 'win32'];
            pkg.cpu = ['x64', 'arm64'];
            fs.writeFileSync('dist/package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Set version
        if: github.event_name == 'workflow_dispatch'
        run: |
          cd dist
          npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: Extract version from tag
        if: github.event_name == 'push'
        run: |
          TAG=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$TAG" >> $GITHUB_ENV
          cd dist
          npm version $TAG --no-git-tag-version

      - name: Publish to npm
        run: |
          cd dist
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
